/*
  Implements a minimal shell.  The shell simply finds executables by
  searching the directories in the PATH environment variable.
  Specified executable are run in a child process.

  AUTHOR: Derek Low
*/

#include "shell.h"
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>

int parsePath(char *dirs[]);
char *lookupPath(char *fname, char **dir,int num);
int parseCmd(char *cmdLine, struct Command *cmd);

/*
  Read PATH environment var and create an array of dirs specified by PATH.

  PRE: dirs allocated to hold MAX_ARGS pointers.
  POST: dirs contains null-terminated list of directories.
  RETURN: number of directories.

  NOTE: Caller must free dirs[0] when no longer needed.

*/
int parsePath(char *dirs[]) {
  int i, numDirs;
  char *pathEnv;
  char *thePath;
  char *nextcharptr; /* point to next char in thePath */

  //pathEnv = (char *) malloc(sizeof(char));
  //nextcharptr = (char *) malloc(sizeof(char));
  
  for (i = 0; i < MAX_PATHS; i++) dirs[i] = NULL;
  pathEnv = (char *) getenv("PATH");
  //printf("pathEnv is length %lu\n",strlen(pathEnv));

  if (pathEnv == NULL) return 0; /* No path var. That's ok.*/
  /*Allocation of memory to thePath must be as large as the pathEnv to copy
    successfully*/
  thePath = (char *) malloc(sizeof(char)*strlen(pathEnv));
  *dirs = (char *) malloc(sizeof(char)*MAX_ARGS);
  /* for safety copy from pathEnv into thePath */
  strcpy(thePath,pathEnv);

#ifdef DEBUG
  printf("Path: %s\n",thePath);
#endif

  /* Now parse thePath */
  nextcharptr = thePath;
  /* Eliminate extra delimiters. */
  while (*nextcharptr == DELIM) nextcharptr++;
  if (*nextcharptr == 0) {
    fprintf(stderr,"No paths present.\n");
    return 0;
  }
  printf("print dirs %s\n",*dirs);

  /* 
     Find all substrings delimited by DELIM.  Make a dir element
     point to each substring.
     TODO: approx a dozen lines.
  */
  printf("print ncharptr %s\n",nextcharptr);
  i = 0;
  /* Realized that I was missing the first entry after I completed the while
     loop, so I'm doing that here.
  */
  dirs[i] = nextcharptr;
  while (*nextcharptr){
    /*
      Replace all colons with then null terminator, then iterate nextcharptr and i.
      After i iteration, set the next dirs pointer to the iterated nextcharptr.
     */
    if (*nextcharptr == ':'){
      *nextcharptr = '\0';
      nextcharptr++;
      i++;
      dirs[i] = nextcharptr;
    }
    else nextcharptr++;
  }
  printf("last entry of dirs is %s\n",dirs[i]);
  numDirs = i+1 ;


  /* Print all dirs */
#ifdef DEBUG
  for (i = 0; i < numDirs; i++) {
    printf("%s\n",dirs[i]);
  }
#endif
  free(dirs[0]);
  return numDirs;
}


/*
  Search directories in dir to see if fname appears there.  This
  procedure is correct!

  PRE dir is valid array of directories
  PARAMS
   fname: file name
   dir: array of directories
   num: number of directories.  Must be >= 0.

  RETURNS full path to file name if found.  Otherwise, return NULL.

  NOTE: Caller must free returned pointer.
*/

char *lookupPath(char *fname, char **dir,int num) {
  char *fullName; // resultant name
  int maxlen; // max length copied or concatenated.
  int i;

  fullName = (char *) malloc(MAX_PATH_LEN);
  /* Check whether filename is an absolute path.*/
  if (fname[0] == '/') {
    strncpy(fullName,fname,MAX_PATH_LEN-1);
    if (access(fullName, F_OK) == 0) {
      return fullName;
    }
  }

  /* Look in directories of PATH.  Use access() to find file there. */
  else {
    for (i = 0; i < num; i++) {
      // create fullName
      maxlen = MAX_PATH_LEN - 1;
      strncpy(fullName,dir[i],maxlen);
      maxlen -= strlen(dir[i]);
      strncat(fullName,"/",maxlen);
      maxlen -= 1;
      strncat(fullName,fname,maxlen);
      // OK, file found; return its full name.
      if (access(fullName, F_OK) == 0) {
	return fullName;
      }
    }
  }
  fprintf(stderr,"%s: command not found\n",fname);
  free(fullName);
  return NULL;
}

/*
  Parse command line and fill the cmd structure.

  PRE 
   cmdLine contains valid string to parse.
   cmd points to valid struct.
  PST 
   cmd filled, null terminated.
  RETURNS arg count

  Note: caller must free cmd->argv[0..argc]

*/
int parseCmd(char *cmdLine, struct Command *cmd) {
  char *clptr = cmdLine;
  int maxlen = strlen(cmdLine);
  int argc = 0; // arg count
  int len; // length of arg

  // cmd->argv[argc] = (char *) malloc(MAX_ARG_LEN);

  // extract args up to max number
  while (argc < MAX_ARGS-1) {
    // find next arg
    while (*clptr != 0 && isspace(*clptr)) clptr++;
    if (*clptr == 0) break; // no next arg, just space
    // go to next whitespace, keep length
    len = 0;  
    while (*clptr != 0 && !isspace(*clptr)) {
      clptr++;
      len++;
    }
    // copy over substring
    cmd->argv[argc] = (char *) malloc(len+1);
    strncpy(cmd->argv[argc],(clptr-len),len);
    cmd->argv[argc][len] = 0;
    /*    printf("ZZ %s\n",cmd->argv[argc]); /* Debug */
    argc++;
  }
  cmd->argv[argc] = NULL;
  cmd->argc = argc;
  free(cmd->argv[argc]);
  return argc;
}

/*
  Runs simple shell.
*/
int main(int argc, char *argv[]) {

  char *dirs[MAX_PATHS]; // list of dirs in environment
  int numPaths;
  char cmdline[LINE_LEN];
  int argcount = 0;
  struct Command *cmd = (struct Command *) malloc(sizeof(struct Command));

  pid_t pid;
  int i;
  int status;
  char prompt;
  
  numPaths = parsePath(dirs);
  // TODO
  /*This is where the infinite loop starts. Could have done while(true), but the for loop seems to be
    the common version
  */ 
  for(;;){
    //request user command
    printf("Please provide an input.\n");
    fflush(stdout);
    
    if (fgets(cmdline,LINE_LEN,stdin) != NULL && cmdline[0] != '\n'){
	argcount = parseCmd(cmdline,cmd);
	if ((pid=fork())==0) printf("We are in a child process");
	else waitpid(pid,&status,0);
	
	for (i = 0; i <cmd->argc; i++){
	  printf("arg[%d]: %s\n",i,cmd->argv[i]);
	}
	
	for (i = 0; i<cmd->argc; i++){
	  if ((prompt = lookupPath(cmd->argv[i], dirs,cmd->argc))==NULL){
	    printf("Command not found.");
	  }
	  else {
	    if (pid = fork() == 0){
	      execv(&prompt, dirs);
	      exit(0);
	    } 
	  }
	}
	if ((strcmp(cmd->argv[0],"exit")) == 0){
	  printf("Exiting.\n");
	  break;
	}
	waitpid(pid,&status,0);
    }
  }
  free(cmd);
  free(dirs[0]);
}

